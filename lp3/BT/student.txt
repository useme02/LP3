// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract Student_Class {
    struct Student {
        string prn;
        uint roll_no;
        string name;
    }

    Student[] private arr;  // Private array to store students

    event log(string msg);

    // Fallback function: Used when the function call does not match any of the functions
    fallback() external payable {
        emit log("In fallback.");
    }

    // Receive function: Allows the contract to accept Ether
    receive() external payable {
        emit log("Received Ether.");
    }

    // Function to add a student
    function add_student(uint roll, string memory name, string memory prn) public {
        arr.push(Student(prn, roll, name));
        emit log("New student added");
    }

    // Function to get total number of students
    function total_students() public view returns (uint) {
        return arr.length;
    }

    // Function to get a student's details by index not mandatory
    function get_student(uint index) public view returns (string memory, uint, string memory) {
        require(index < arr.length, "Index out of bounds"); // Check for valid index
        Student memory s = arr[index];
        return (s.prn, s.roll_no, s.name);
    }

    // Function to get all students (optional, if needed)
    function get_all_students() public view returns (Student[] memory) {
        return arr;
    }
}
